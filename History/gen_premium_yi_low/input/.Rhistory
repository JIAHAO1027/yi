}else{
count<-append(count,0)
}
}
return(count)
}
in_or_out<- func(x,y)
proportion<-sum(func(x,y)/100)
proportion
df<-data.frame(x,y,in_or_out)
ggplot(df, aes(x,y))+geom_point(aes(col=in_or_out))
count<-c()
b<-function(n, plotit=TRUE) {
x<-runif(n, min=-1, max=1)
y<-runif(n, min=-1, max=1)
for(i in 1:n){
if((x[i])^2 + (y[i])^2<=1){
count<-append(count,1)
}else{
count<-append(count,0)
}
}
if(plotit==TRUE){
df<-data.frame(x,y,in_or_out)
print(ggplot(df, aes(x,y))+geom_point(aes(col=in_or_out)))
}
return(4*sum(count)/n)
}
b(200, plotit=TRUE)
count<-c()
b<-function(n, plotit=TRUE) {
x<-runif(n, min=-1, max=1)
y<-runif(n, min=-1, max=1)
View(x)
count<-c()
b<-function(n, plotit=TRUE) {
x<-runif(n, min=-1, max=1)
y<-runif(n, min=-1, max=1)
for(i in 1:n){
if((x[i])^2 + (y[i])^2<=1){
count<-append(count,1)
}else{
count<-c()
b<-function(n, plotit=TRUE) {
x1<-runif(n, min=-1, max=1)
y1<-runif(n, min=-1, max=1)
for(i in 1:n){
if((x1[i])^2 + (y1[i])^2<=1){
count<-append(count,1)
}else{
count<-append(count,0)
}
}
if(plotit==TRUE){
df<-data.frame(x1,y1,in_or_out)
print(ggplot(df, aes(x1,y1))+geom_point(aes(col=in_or_out)))
}
return(4*sum(count)/n)
}
b(200, plotit=TRUE)
```
diamonds<-diamonds%>%select(price, cut, carat)
library(DataComputing)
library(magrittr)
library(ggplot2)
library(dplyr)
diamonds<-diamonds%>%select(price, cut, carat)
ggplot(diamonds, aes(carat, price))+geom_point(aes(col=cut))+facet_wrap(~cut)+stat_smooth(method="loess", color="blue")
ggplot(diamonds, aes(carat, price))+geom_point(aes(col=cut))+facet_wrap(~cut)+stat_smooth(se=FALSE, method="loess")
ggplot(diamonds, aes(carat, price))+geom_point(aes(col=cut))+facet_wrap(~cut)+geom_smooth(se=FALSE, color="blue")
diamonds<-diamonds%>%select(price, cut, carat)
ggplot(diamonds, aes(carat, price))+geom_point(aes(col=cut, size=5))+facet_wrap(~cut)+geom_smooth(se=FALSE, color="blue")
ggplot(diamonds, aes(carat, price))+geom_point(aes(col=cut, size=2))+facet_wrap(~cut)+geom_smooth(se=FALSE, color="blue")
ggplot(diamonds, aes(carat, price))+geom_point(aes(col=cut, size=0.5))+facet_wrap(~cut)+geom_smooth(se=FALSE, color="blue")
ggplot(diamonds, aes(carat, price))+geom_point(aes(col=cut, size=0.1))+facet_wrap(~cut)+geom_smooth(se=FALSE, color="blue")
diamonds<-diamonds%>%select(price, cut, carat)
ggplot(diamonds, aes(carat, price))+geom_point(aes(col=cut, size=0.05))+facet_wrap(~cut)+geom_smooth(se=FALSE, color="blue")+theme()
library(DataComputing)
library(magrittr)
library(ggplot2)
library(dplyr)
ggplot(diamonds, aes(carat, price))+geom_point(aes(col=cut, size=0.05))+facet_wrap(~cut)+geom_smooth(se=FALSE, color="blue")+labs(title="carat vs price") +theme(text=element_text(size=4))
ggplot(diamonds, aes(carat, price))+geom_point(aes(col=cut, size=0.05))+facet_wrap(~cut)+geom_smooth(se=FALSE, color="blue")+labs(title="carat vs price") +theme(text=element_text(size=12))
ggplot(diamonds, aes(carat, price))+geom_point(aes(col=cut), size=0.05)+facet_wrap(~cut)+geom_smooth(se=FALSE, color="blue")+labs(title="carat vs price") +theme(axis.text=element_text(size=12))
ggplot(diamonds, aes(carat, price))+geom_point(aes(col=cut), size=5)+facet_wrap(~cut)+geom_smooth(se=FALSE, color="blue")+labs(title="carat vs price") +theme(axis.text=element_text(size=15))
ggplot(diamonds, aes(carat, price))+geom_point(aes(col=cut), size=2)+facet_wrap(~cut)+geom_smooth(se=FALSE, color="blue")+labs(title="carat vs price") +theme(axis.text=element_text(size=8), axis.title=element_text(size=15),plot.title=element_text(size=20))
ggplot(diamonds, aes(carat, price))+geom_point(aes(col=cut), size=2)+facet_wrap(~cut)+geom_smooth(se=FALSE, color="blue")+labs(title="carat vs price") +theme(axis.text=element_text(size=10), axis.title=element_text(size=15),plot.title=element_text(size=20))
ggplot(diamonds, aes(carat, price))+geom_point(aes(col=cut), size=2)+facet_wrap(~cut)+geom_smooth(se=FALSE, color="blue")+labs(title="carat vs price") +theme(axis.text=element_text(size=10), axis.title=element_text(size=20),plot.title=element_text(size=30), strip.text=element_text(size=20))
ggplot(diamonds, aes(carat, price))+geom_point(aes(col=cut), size=2)+facet_wrap(~cut)+geom_smooth(se=FALSE, color="blue")+labs(title="carat vs price") +theme(axis.text=element_text(size=10), axis.title=element_text(size=15),plot.title=element_text(size=30), strip.text=element_text(size=15))
ggplot(diamonds, aes(carat, price))+geom_point(aes(col=cut), size=2)+facet_wrap(~cut)+geom_smooth(se=FALSE, color="blue")+labs(title="carat vs price") +theme(axis.text=element_text(size=10), axis.title=element_text(size=15),plot.title=element_text(size=30), strip.text=element_text(size=15), legend.text(size=15))
ggplot(diamonds, aes(carat, price))+geom_point(aes(col=cut), size=2)+facet_wrap(~cut)+geom_smooth(se=FALSE, color="blue")+labs(title="carat vs price") +theme(axis.text=element_text(size=10), axis.title=element_text(size=15),plot.title=element_text(size=30), strip.text=element_text(size=15), legend.text=element_text(size=15))
ggplot(diamonds, aes(carat, price))+geom_point(aes(col=cut), size=2)+facet_wrap(~cut)+geom_smooth(se=FALSE, color="blue")+labs(title="carat vs price") +theme(axis.text=element_text(size=10), axis.title=element_text(size=15),plot.title=element_text(size=30), strip.text=element_text(size=15), legend.text=element_text(size=15), legend.title=element_text(size=15))
lapply(data, fix_missing_99)
fix_missing_99<-function(x){
for(i in 1:length(x)){
if(x[i]==-99){
x[i]=NA
}
}
}
for(j in 1:nrow(data)){
data[j,]<- fix_missing_99(data[j,])
}
data
lapply(data, fix_missing_99)
sapply(data, fix_missing_99)
library(DataComputing)
library(magrittr)
library(ggplot2)
library(dplyr)
```
#Question 1
```{r}
# built-in dataset in R
head(airquality)
```
Change data from wide to narrow format (above) using gather function.
Group Ozone, Solar.R, Wind, Temp into one variable called `type` and create another column called `value` to store their values. Your output should look like this:
```{r, echo = FALSE}
airquality<-airquality%>%gather(type=c(Ozone, Solar.R, Wind, Temp), value=value)
head(airquality)
```
#Question 2
Suppose you have a data frame, `data`, as given below:
```{r data, echo = F}
# Data frame for questions
data <- data.frame(V1 = rep(c("a","b","c"), each = 2),
V2 = rep(c(1:2), times = 3),
V3 = rep(c("alpha", "beta", "gamma")),
V4 = seq(10, 60, by = 10))
print(data)
```
Assuming that the `tidyr` and `dplyr` libraries are already loaded, write down what the output for the following code.  The final result is enough for full credit, but partial credit will be given for writing out and labelling intermediate steps.
```{r SQ1, results = 'hide'}
data %>%
filter(V1 == "a") %>% # Step 1
select(V2, V4) %>% # Step 2
gather(key = Apple, value = Banana, V2, V4)%>%  # Step 3
mutate(Apple = Banana) # Step 4
```
```{r}
step1<-data.frame(rep(c("a"), each=2),
v2=c(1:2),
v3=c("alpha", "beta"),
v4=c("10","20"))
step1
step2<-data.frame(v2=c(1:2),v4=c("10","20"))
step2
step3<-data.frame(Apple=rep(c("V2", "V4"), each=2), Banana=c("1", "2", "10", "20"))
step3
step4<-data.frame(Apple=c("1", "2", "10", "20"), Banana=c("1", "2", "10", "20"))
step4
```
#Question 3
Suppose you have a data frame, `data`, as given below.
a) Write a function called `fix_missing_99` that takes one argument: `x`, a numeric vector.  The function should replace every component of `x` equal to -99 with `NA`.
b) Write a loop that replaces every -99 in `data` with `NA`.  For full credit, your code must use the function in part (a) and it should continue to work without modification if additional columns are added to the data frame.
set.seed(1014)
data <- data.frame(replicate(6, sample(c(1:10, -99), 6, rep = TRUE)))
names(data) <- letters[1:6]
data
fix_missing_99<-function(x){
for(i in 1:length(x)){
if(x[i]==-99){
x[i]=NA
}
}
}
for(j in 1:nrow(data)){
data[j,]<- fix_missing_99(data[j,])
}
data
sapply(data, fix_missing_99)
```
#Question 4
Assuming the 'ggplot2' is already loaded.
The first 6 rows of the 'diamond' dataset are:
```{r, echo = FALSE}
head(diamonds)
```
What command in 'ggplot' that you will use to generate the graph given below?
```{r echo=FALSE,fig.height=3,fig.width=6}
diamonds<-diamonds%>%select(price, cut, carat)
ggplot(diamonds, aes(carat, price))+geom_point(aes(col=cut), size=2)+facet_wrap(~cut)+geom_smooth(se=FALSE, color="blue")+labs(title="carat vs price") +theme(axis.text=element_text(size=10), axis.title=element_text(size=15),plot.title=element_text(size=30), strip.text=element_text(size=15), legend.text=element_text(size=15), legend.title=element_text(size=15))
```
library(DataComputing)
library(magrittr)
library(ggplot2)
library(dplyr)
```{r data2, echo = F}
set.seed(1014)
data <- data.frame(replicate(6, sample(c(1:10, -99), 6, rep = TRUE)))
names(data) <- letters[1:6]
data <- data.frame(replicate(6, sample(c(1:10, -99), 6, rep = TRUE)))
data <- data.frame(replicate(6, runif(c(1:10, -99), 6, rep = TRUE)))
data <- data.frame(replicate(6, sample(c(1:10, -99), 6, rep = TRUE)))
set.seed(1014)
data <- data.frame(replicate(6, sample(c(1:10, -99), 6, rep = TRUE)))
names(data) <- letters[1:6]
data
apply(data, fix_missing_99)
?lapply
file.choose()
?apply
Stations <- mosaic::read.file("http://tiny.cc/dcf/DC-Stations.csv")
data_site <- "http://tiny.cc/dcf/2014-Q4-Trips-History-Data-Small.rds"
Trips <- readRDS(gzcon(url(data_site)))
View(Trips)
Trips %>%
ggplot(aes(x = sdate)) +
geom_density()
?geom_density()
Trips %>%
mutate(time_of_day =
lubridate::hour(sdate) + lubridate::minute(sdate) / 60) %>%
ggplot(aes(x=sdate))+geom_density()
Trips %>%
mutate(time_of_day =
lubridate::hour(sdate) + lubridate::minute(sdate) / 60) %>%
ggplot(aes(x=time_of_day))+geom_density()
Trips %>%
mutate(time_of_day =
lubridate::hour(sdate) + lubridate::minute(sdate) / 60) %>% mutate(day_of_the_week=lubridate::wday(sdate))
ggplot(aes(x=time_of_day))+geom_density()+facet(~day_of_the_week)
```
Trips %>%
mutate(time_of_day =
lubridate::hour(sdate) + lubridate::minute(sdate) / 60) %>% mutate(day_of_the_week=lubridate::wday(sdate))
ggplot(aes(x=time_of_day))+geom_density()+facet_grid(.~day_of_the_week)
```
Trips %>%
mutate(time_of_day =
lubridate::hour(sdate) + lubridate::minute(sdate) / 60) %>% mutate(day_of_the_week=lubridate::wday(sdate))%>%
ggplot(aes(x=time_of_day))+geom_density()+facet_grid(.~day_of_the_week)
Trips %>%
mutate(time_of_day =
lubridate::hour(sdate) + lubridate::minute(sdate) / 60) %>% mutate(day_of_the_week=lubridate::wday(sdate))%>%
ggplot(aes(x=time_of_day))+geom_density(aes(fill=client, alpha=.25,color=NA))+facet_grid(.~day_of_the_week)
Trips %>%
mutate(time_of_day =
lubridate::hour(sdate) + lubridate::minute(sdate) / 60) %>% mutate(day_of_the_week=lubridate::wday(sdate))%>%
ggplot(aes(x=time_of_day))+geom_density(aes(fill=client, alpha=.25,color=NA))+facet_grid(.~day_of_the_week)
Trips %>%
mutate(time_of_day =
lubridate::hour(sdate) + lubridate::minute(sdate) / 60) %>% mutate(day_of_the_week=lubridate::wday(sdate))%>%
ggplot(aes(x=time_of_day))+geom_density(aes(fill=client), alpha=.25,color=NA)+facet_grid(.~day_of_the_week)
```
Trips %>%
mutate(time_of_day =
lubridate::hour(sdate) + lubridate::minute(sdate) / 60) %>% mutate(day_of_the_week=lubridate::wday(sdate))%>%
ggplot(aes(x=time_of_day))+geom_density(aes(fill=client), alpha=.5,color=NA)+facet_grid(.~day_of_the_week)
Trips %>%
mutate(time_of_day =
lubridate::hour(sdate) + lubridate::minute(sdate) / 60) %>% mutate(day_of_the_week=lubridate::wday(sdate))%>%
ggplot(aes(x=time_of_day))+geom_density(aes(fill=client), alpha=.5,color=NA, position = position_stack())+facet_grid(.~day_of_the_week)
```
Trips %>%
mutate(time_of_day =
lubridate::hour(sdate) + lubridate::minute(sdate) / 60) %>% mutate(day_of_the_week=lubridate::wday(sdate))%>%
ggplot(aes(x=time_of_day))+geom_density(aes(fill=client), alpha=.5,color=NA)+facet_grid(.~day_of_the_week)
Trips %>%
mutate(time_of_day =
lubridate::hour(sdate) + lubridate::minute(sdate) / 60) %>% mutate(day_of_the_week=lubridate::wday(sdate))%>%
ggplot(aes(x=time_of_day))+geom_density(aes(fill=client), alpha=.5,color=NA, position = position_stack())+facet_grid(.~day_of_the_week)
Trips %>%
mutate(time_of_day =
lubridate::hour(sdate) + lubridate::minute(sdate) / 60) %>% mutate(day_of_the_week=lubridate::wday(sdate))%>%
ggplot(aes(x=time_of_day))+geom_density(aes(fill=client), alpha=.5,color=NA)+facet_grid(.~day_of_the_week)
```
Trips %>%
mutate(time_of_day =
lubridate::hour(sdate) + lubridate::minute(sdate) / 60) %>% mutate(day_of_the_week=lubridate::wday(sdate))%>%
ggplot(aes(x=time_of_day))+geom_density(aes(fill=client), alpha=.5,color=NA, position = position_stack())+facet_grid(.~day_of_the_week)
Trips %>%
mutate(time_of_day =
lubridate::hour(sdate) + lubridate::minute(sdate) / 60) %>% mutate(wday = ifelse(lubridate::wday(sdate) %in% c(1,7), "weekend", "weekday"))%>%
ggplot(aes(x=time_of_day))+geom_density(aes(fill=client), alpha=.5,color=NA, position = position_stack())+facet_grid(.~wday)
```
Trips %>%
mutate(time_of_day =
lubridate::hour(sdate) + lubridate::minute(sdate) / 60) %>% mutate(wday = ifelse(lubridate::wday(sdate) %in% c(1,7), "weekend", "weekday"))%>%
ggplot(aes(x=time_of_day))+geom_density(aes(fill=wday), alpha=.5,color=NA, position = position_stack())+facet_grid(.~client)
Trips %>%
mutate(time_of_day =
lubridate::hour(sdate) + lubridate::minute(sdate) / 60) %>% mutate(wday = ifelse(lubridate::wday(sdate) %in% c(1,7), "weekend", "weekday"))%>%
ggplot(aes(x=time_of_day))+geom_density(aes(fill=client), alpha=.5,color=NA, position = position_stack())+facet_grid(.~wday)
Trips %>%
mutate(time_of_day =
lubridate::hour(sdate) + lubridate::minute(sdate) / 60) %>% mutate(wday = ifelse(lubridate::wday(sdate) %in% c(1,7), "weekend", "weekday"))%>%
ggplot(aes(x=time_of_day))+geom_density(aes(fill=wday), alpha=.5,color=NA, position = position_stack())+facet_grid(.~client)
Trips %>%
mutate(time_of_day =
lubridate::hour(sdate) + lubridate::minute(sdate) / 60) %>% mutate(wday = ifelse(lubridate::wday(sdate) %in% c(1,7), "weekend", "weekday"))%>%
ggplot(aes(x=time_of_day))+geom_density(aes(fill=client), alpha=.5,color=NA, position = position_stack())+facet_grid(.~wday)
Trips %>%
mutate(time_of_day =
lubridate::hour(sdate) + lubridate::minute(sdate) / 60) %>% mutate(wday = ifelse(lubridate::wday(sdate) %in% c(1,7), "weekend", "weekday"))%>%
ggplot(aes(x=time_of_day))+geom_density(aes(fill=wday), alpha=.5,color=NA, position = position_stack())+facet_grid(.~client)
View(station)
View(Stations)
Left<-Stations%>%select(name,lat,long)%>%dyplyr::rename(name=sstation, lat=lat, long=long)
install.packages("dyplyr")
Left<-Stations%>%select(name,lat,long)%>%dplyr::rename(name=sstation, lat=lat, long=long)
Left<-Stations%>%select(name,lat,long)%>%dplyr::rename(sstation=name, lat=lat, long=long)
View(Left)
Right<-Stations%>%select(name,lat,long)%>%dplyr::rename(estation=name, lat2=lat, long2=long)
All<- Left%>% merge(Right,all=TRUE)
View(All)
source("http://tiny.cc/dcf/haversine.R")
Distances<- All%>%mutate(dist = haversine(lat, long, lat2, long2))
View(Distances)
Distances<- All%>%mutate(dist = haversine(lat, long, lat2, long2))%>%select(sstation, estation, dist)
View(Distances)
View(Trips)
Trips%>%left_join(Distances, by=c(sstation=sstation, estation=estation))
Trips%>%left_join(Distances, by=c("sstation"=="sstation", "estation"=="estation"))
Trips%>%left_join(Distances, by=c(sstation==sstation, estation==estation))
Trips%>%full_join(Distances, by=c(sstation==sstation, estation==estation))
Trips%>%left_join(Distances, by=c("sstation"=="sstation"", "estation"=="estation"))
Trips%>%left_join(Distances, by=c("sstation"=="sstation","estation"=="estation"))
?left_join()
Trips<-left_join(Trips, Distances, by=c("sstation"=="sstation","estation"=="estation"))
Trips<-inner_join(Trips, Distances, by=c("sstation"="sstation","estation"="estation"))
View(Trips)
Trips<-full_join(Trips, Distances, by=c("sstation"="sstation","estation"="estation"))
View(Trips)
Trips %>%
mutate(time_of_day =
lubridate::hour(sdate) + lubridate::minute(sdate) / 60) %>% mutate(wday = ifelse(lubridate::wday(sdate) %in% c(1,7), "weekend", "weekday"))%>%
ggplot(aes(x=time_of_day))+geom_density()+facet_grid(wday~client)
Distances<- All%>%mutate(dist = haversine(lat, long, lat2, long2))%>%select(sstation, estation, dist)
Trips<-inner_join(Trips, Distances, by=c("sstation"="sstation","estation"="estation"))
Trips %>%
mutate(time_of_day =
lubridate::hour(sdate) + lubridate::minute(sdate) / 60) %>% mutate(wday = ifelse(lubridate::wday(sdate) %in% c(1,7), "weekend", "weekday"))%>%
ggplot(aes(x=time_of_day))+geom_density()+facet_grid(wday~client)
source("http://tiny.cc/dcf/haversine.R")
Distances<- All%>%mutate(dist = haversine(lat, long, lat2, long2))%>%select(sstation, estation, dist)
Trips<-inner_join(Trips, Distances, by=c("sstation"="sstation","estation"="estation"))
Trips %>%
mutate(time_of_day =
lubridate::hour(sdate) + lubridate::minute(sdate) / 60) %>% mutate(wday = ifelse(lubridate::wday(sdate) %in% c(1,7), "weekend", "weekday"))%>%
ggplot(aes(x=time_of_day))+geom_density()+facet_grid(client~wday)
View(Trips)
setwd("/Users/suyanglu/Dropbox/urap_programming/yi/gen_premium_new")
filename_list="lst_700D_Yi_Feb222016_giftindex_price_corrected_juexiao_0306.csv"
#filename_list="Feb062016_750D_CombineList.csv"
filename_dict="dict_700d_750d_Feb082016.csv"
filename_regression="regresstion_data.csv"
df_input="transec_700d_cleaned_20160215.csv"
setwd("./input")
library(DataComputing)
library(lfe)
####################################################fixme
#setwd("C:/Users/xin_chen/Dropbox/urap_programming/yi/gen_premium_new")
setwd("/Users/suyanglu/Dropbox/urap_programming/yi/gen_premium_new")
filename_list="lst_700D_Yi_Feb222016_giftindex_price_corrected_juexiao_0306.csv"
#filename_list="Feb062016_750D_CombineList.csv"
filename_dict="dict_700d_750d_Feb082016.csv"
filename_regression="regresstion_data.csv"
df_input="transec_700d_cleaned_20160215.csv"
setwd("./input")
df_input = read.csv(filename_transaction,head=TRUE)
Camera<-read.csv(filename_list,stringsAsFactors = FALSE)
Price<-read.csv(filename_dict,encoding = "UTF-8")%>%select(index_final,Avg..Price.Esitimate)
Price$Avg..Price.Esitimate<-as.character(Price$Avg..Price.Esitimate)
colnames(Camera)[colnames(Camera)=="ItemID.LIsting_id."] <- "item_id"
#Genarate delta n
df_input="transec_700d_cleaned_20160215.csv"
setwd("./input")
setwd("/Users/suyanglu/Dropbox/urap_programming/yi/gen_premium_new")
filename_list="lst_700D_Yi_Feb222016_giftindex_price_corrected_juexiao_0306.csv"
#filename_list="Feb062016_750D_CombineList.csv"
filename_dict="dict_700d_750d_Feb082016.csv"
filename_regression="regresstion_data.csv"
df_input="transec_700d_cleaned_20160215.csv"
setwd("./input")
df_input = read.csv(df_input,head=TRUE)
Camera<-read.csv(filename_list,stringsAsFactors = FALSE)
Price<-read.csv(filename_dict,encoding = "UTF-8")%>%select(index_final,Avg..Price.Esitimate)
Price$Avg..Price.Esitimate<-as.character(Price$Avg..Price.Esitimate)
colnames(Camera)[colnames(Camera)=="ItemID.LIsting_id."] <- "item_id"
#Genarate delta n
df=Camera%>%
select(item_id,bundle_index,dict_yi_index)%>%
filter(bundle_index!=0)
##i,j, k index the row numbers for columns bundle_index1, bundle_index2, dict_yi_index resp.
df.deltan=data.frame()
i=1
while(i<=length(df$item_id))
{
count_n=df%>%
filter(item_id==item_id[i]&bundle_index==bundle_index[i])%>%
tally()
n=count_n[1,1]
j=i+n
a=as.numeric(c(df$item_id[i],df$bundle_index[i],df$bundle_index[j],n))
while(df$item_id[j]==df$item_id[i]&j<=length(df$item_id))
{
t=0
for(k in i:(i+n-1))
if(df$dict_yi_index[j]==df$dict_yi_index[k]) t=t+1
if(t==0)
a=a+c(0,0,0,1)
else a=a+c(0,0,0,-1)
if(df$bundle_index[j]!=df$bundle_index[j+1]|(j+1)>length(df$item_id))
{
df.deltan=rbind(df.deltan,a)
a=as.numeric(c(df$item_id[i],df$bundle_index[i],df$bundle_index[j+1],n))
}
j=j+1
}
i=i+n
}
colnames(df.deltan)=c("item_id","bundle_index1","bundle_index2","diff")
#Set a benchmark as denominator for "prem_perc"
Benchmark=Camera%>%
group_by(item_id)%>%
summarise(benchmark=first(bundle_price))
# Set all "unknown" or lost Price = 0
i=1
while(i<length(Price$Avg..Price.Esitimate))
{
if(Price$Avg..Price.Esitimate[i]==""||Price$Avg..Price.Esitimate[i]=="unknown"||Price$Avg..Price.Esitimate[i]=="Unknown")
Price$Avg..Price.Esitimate[i]=0
i=i+1
}
#Generate premium and a lot of indicators
Camera$dict_yi_index<-as.character(Camera$dict_yi_index)
Price$index_final<-as.character(Price$index_final)
Price$Avg..Price.Esitimate<-as.numeric(Price$Avg..Price.Esitimate)
CameraWPrice<-Camera%>%left_join(Price,by=c("dict_yi_index"="index_final"))
result<-CameraWPrice%>%
group_by(item_id,bundle_index)%>%
summarise(total=sum(Accessory_title!=""),
total_nofw=total-sum(as.vector(sapply('FW',grepl,dict_yi_index))),
nongift=sum(Accessory_title!=""&gift_or_not!=1),
nongift_nofw=sum(Accessory_title!=""&gift_or_not!=1&!(as.vector(sapply('FW',grepl,dict_yi_index)))),
branded=sum(Accessory_title!=""&is.na(brand)==FALSE),
branded_nofw=sum(Accessory_title!=""&is.na(brand)==FALSE&!(as.vector(sapply('FW',grepl,dict_yi_index)))),
num_of_yuanzhuang=sum(as.vector(sapply('????',grepl,Accessory_title))),
num_of_acc_no_price=sum(Avg..Price.Esitimate==0),
bundle_price=mean(bundle_price),
price_ref=sum(Avg..Price.Esitimate),
price_ref_adjgift=sum(Avg..Price.Esitimate*(1-gift_or_not)))
result[is.na(result)]<-0
result<-result%>%
mutate(bundle_add_on=bundle_price-first(bundle_price),
price_ref_rel=price_ref-first(price_ref),
num_of_acc_rel=total-first(total),
premium=bundle_add_on-price_ref_rel,
premium_percent=(bundle_add_on-price_ref_rel)/bundle_price,
ind_firstbundle_noacc=first(total)==0)%>%
filter(bundle_index!=0)
#Genarate a
result2=data.frame()
i=1
while(i<=length(result$item_id))
{
j=i+1
while(j<=length(result$item_id)&result$item_id[j]==result$item_id[i])
{
result2=rbind(result2,
c(result$item_id[j],
result$bundle_index[i],
result$bundle_index[j],
result$premium[j]-result$premium[i]))
j=j+1
}
i=i+1
}
colnames(result2)=c("item_id","bundle_index1","bundle_index2","premrel")
# result2=result2%>%
#   left_join(Benchmark,by=c("item_id"="item_id"))%>%
#   filter(bundle_index!=1)%>%
#   mutate(premrel_perc=premrel/benchmark)
result3<-result2%>%left_join(df.deltan,by=c("item_id"="item_id","bundle_index1"="bundle_index1","bundle_index2"="bundle_index2"))
result3$diff[is.na(result3$diff)]=0
result3=result3%>%
filter(premrel>-500&premrel<500)
### add share
df_input<-df_input %>% select(item_id, amount, color_category_ind_18_55, bundle_index)
#group the cells
grouped_sales <- df_input %>% group_by(item_id) %>% summarize(item_sales=sum(amount))
grouped_bundle <- df_input %>% group_by(item_id, bundle_index) %>% summarize(bundle_sales=sum(amount))
grouped_f_sales <- df_input%>%group_by(item_id, color_category_ind_18_55) %>% filter(color_category_ind_18_55==1)%>%summarize(filterted_item_sales=sum(amount))
grouped_f_bundle = df_input %>%group_by(item_id, bundle_index, color_category_ind_18_55)%>%filter(color_category_ind_18_55==1)%>%summarize(filtered_bundle_sales=sum(amount))
#grouped_f_bundle =grouped_f_bundle%>%select(item_id, bundle_index,filtered_bundle_sales)
#merge
df1 = data.frame(grouped_sales)
df2 = data.frame(grouped_bundle)
s1 <- merge(df1,df2,by="item_id")
df3 <- data.frame(grouped_f_sales%>%select(item_id,filterted_item_sales ))
df4 <- data.frame(grouped_f_bundle%>%select(item_id, bundle_index,filtered_bundle_sales))
s1 = left_join(s1, df3, by='item_id')
s1 = left_join(s1, df4, by=c("item_id", "bundle_index"))
#share function
count<-function(x){
return(x['bundle_sales'] / x['item_sales'])
}
f_count<-function(x){
return(x['filtered_bundle_sales'] / x['filterted_item_sales'])
s1[is.na(s1)]<-"."
s1<-s1%>%select(item_id, bundle_index, share, filtered_item_share)
s1$bundle_index<- as.numeric(s1$bundle_index)
result3<-result3%>%left_join(s1, by=c("item_id"="item_id", "bundle_index2"="bundle_index"), copy=TRUE)
View(result3)
setwd("../output")
write.csv(result3,file = "all.csv")
write.csv(s1,file="share_filtered.csv")
jjj
library(DataComputing)
